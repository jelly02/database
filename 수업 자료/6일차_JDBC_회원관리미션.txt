## ---------------------------
## JDBC 프로그래밍
## ---------------------------
-- Java DataBase Connectivity
-- JDBC = Java + Database(SQL) 연결 위한 표준 api
-- 회원관리시스템 : MEMBER 테이블
-- Pattern Programming
	>> DTO Pattern
	>> DAO Pattern
	>> Singleton Pattern
	>> Factory Pattern
	
-- 자바 : MemberService.java
	>> 회원 관리를 위한 서비스 제공하는 기능 
		=> 서비스를 하려고보니 DB연결 필요 
		=> DAO(CRUD)
		=> 회원관리 서비스에 사용할 SQL 구문

	
## 개발환경 환경설정
	1. dbms : oracle 설치

	2. jdbc api : 
		=> 자바에서 제공한 표준 api
		=> java se 포함 (rt.jar => java.sql.*, javax.sql.*)
		
	3. jdbc driver : 
		=> db vendor가 구현해서 제공하는 구현물
		=> oracle : ojdbc6.jar
		=> 복사위치 : %java_home%\jre\lib\ext> ojdbc6.jar (공통 lib 위치)

## javac.exe / java.exe
-- 사용한 클래스를 찾아가는 경로 : classpath
-- classpath 경로 순서
	1. rt.jar
	2. %java_home%\jre\lib\ext> *.jar (ojdbc6.jar : 공통 lib 위치)
	
	3. set classpath=환경설정
		>> os 설정 : set classpath=a.jar;b.jar
		>> dos> javac -classpath a.jar
		>> dos> java -classpath a.jar
		
		>> eclipse : 필요한 lib 선택 지정
		
		>> spring(spring boot) f/w 
			=> 의존관계 lib 자동으로 관리해주는 f/w : maven,gradle
		
	4. classpath 환경설정되어 있지않으면 현재폴더(working diretory) 


## JDBC API
-- java.sql.*;
-- DriverManager
-- Connection
-- Statement / PreparedStatement / CallableStatement
-- ResultSet


## JDBC 프로그래밍 기본절차
1. 드라이버 로딩  
2. DB 서버연결 
3. SQL 통로개설
4. SQL수행요청
5. 결과처리
6. 자원해제


## JDBC Resource property
## Oracle
1. String driver = "oracle.jdbc.driver.OracleDriver";
2. String url = "jdbc:oracle:thin:@localhost:1521:XE";
3. String user = "scott";
4. String password = "tiger";


## JDBC 기본 예제
// 1. 드라이버 로딩 
Class.forName(driver);

// 2. DB 서버연결 
Connection conn = DriverManager.getConnection(url, user, password);

// 3. SQL 통로개설 : 동적 SQL 수행 
Statement stmt = conn.createStatement();
// 4. SQL수행요청
ResultSet rs = stmt.executeQuery("select * from dept");

// 3. SQL 통로개설 : 정적 SQL 수행 
PreparedStatement stmt = conn.preparetatement("select * from dept where dname=?");
stmt.setString(1, dname);
// 4. SQL수행요청
ResultSet rs = stmt.executeQuery();

5. 결과처리
while(rs.next()) {
	int deptno = rs.getInt("deptno");
	String dname = rs.getString("dname");
	String loc = rs.getString("loc");
}

6. 자원해제
rs.close();
stmt.close();
conn.close();


## 예외처리
1. SQLException : dbms 
2. ClassNotFoundException : jdbc driver loading


## SQL 통로
-- Statement 
	=> 동적 SQL 수행
	=> sql 구문오류 실행시(runtime) 발생
	=> sql '문자열' 변환 번거로움
	=> "sql수행문" n/w traffic 증가
	
	Statement stmt = conn.createStatement();
	stmt.executeUpdate(sql);
	stmt.exeuteQuery(sql);

-- PreparedStatement 
	=> 정적 SQL 수행 : sql 전용통로 
	String sql = "insert into dept values(?, ?, ?)";
	PreparedStatement pstmt = conn.prepareStatement(sql);
	
	// ? 기호에 매핑되는 값을 설정해서 sql 통로 완성
	// setXxx(index, 값) : index는 ?의 위치, 시작은 1번부터
	// setString(1, 변수명) => 문자열 => 'sql문자열' 변환
	pstmt.setInt(1, deptno);
	pstmt.setString(2, dname);
	pstmt.setString(3, loc);
	
	// 전용통로이기때문에 실행시 sql 구문을 지정해서는 안됨(주의)
	pstmt.executeUpdate();

-- CallableStatement
	=> Stored function, Stored procedure 호출 사용 통로
	=> PL/SQL


## SQL 수행요청 메서드
-- R : executeQuery(sql) : ResultSet
-- CUD : executeUpdate(sql) : int
-- 기타 : execute(sql) : boolean


## ResultSet API
-- select 수행결과 객체
-- select 결과 유무 및 해당레코드 커서 이동 : next()
-- 해당레코드 컬럼데이터 가져오기 : 
	=> getXxx(select컬럼인덱스번호) : xxx타입
	=> getXxx("select컬럼명") : xxx타입
	=> xxx : getString(), getInt(), getDate() 등


## Design Pattern : JDBC 패턴 프로그래밍 

## MVC Pattern
	=> Model : Business Logic, Dao, DTO 클래스
	=> View : Presentation Logic, UI(CUI, GUI)
	=> Controller : 요청제어 클래스


## Controller 클래스의 역할 및 절차
1. 요청 파악 : 회원가입요청, 로그인요청 등
2. 요청 데이터 가져오기
3. 요청 데이터 검증
4. Model에게 요청 처리의뢰
5. 요청결과(응답) 받아서 응답화면 제어(이동)


## DTO Pattern : Data Transfer Object
	=> 데이터를 가지고 n/w 통해서 이동하는 객체
	=> 테이블당 한개의 클래스로서 테이블의 구조참조
	=> 컬럼 매핑되도록 멤버변수 선언
	=> 설계규칙: encapsulation, 직렬화객체(implements java.io.Serializable)
	=> 자바 멤버변수 아이디 : String memberId
	>> DB 컬럼명 아이디   : MEMBER_ID varchar2(30)

## DAO Pattern : 
	=> Dat Access Object
	=> 데이터베이스에 대한 crud 로직 구현 클래스
	=> 테이블 스키마와 매핑되게 작성
	=> Singleton pattern 적용해서 설계


## Singleton Pattern
	=> 하나의 클래스에 대해서 단일객체(single instance) 사용
	=> 규칙 :
	1. private 생성자
	2. public static 클래스이름 getInstance() {
			return instance;
		}
	3. private static 클래스이름 instance = new 클래스이름();

	=> 사용 :Singleton Pattern 클래스 사용
	클래스이름 instance = 클래스이름.getInstance();

	=> [실급] DeptDao 클래스에 singleton pattern 적용해서 변경하세요.


## Factory Pattern
-- Dao Pattern (Singleton Pattern)
-- connection 반환 메서드
-- colose 자원해제 메서드

-- 클래스이름 : FactoryDao
-- 1. jdbc property : driver, url, user, password
-- 2. 생성자 : driver 로딩
		=> singleton pattern 
		=> instance 변수
		=> getInstance() 메서드
-- 3. getConnection() : Connection
-- 4. 자원해제
		=> insert, update, delete(cud) : Statement/PreparedStatement, Connection
		=> select : ResultSet, Statement/PreparedStatement, Connection
		=> close(Statement, Connnection)
		=> close(ResultSet, Statement, Connnection)
		

## jdbc 프로그래밍 절차 ##

1. jdbc driver 로딩
2. db 서버연결 : url, user, password  => Connection
3. 연결된 서버와 통로 개설 => Statement, PreparedStatement, CallableStatement
4. 통로이용 sql 실행 요청
5. 실행결과 처리
6. 자원해제


## JDBC 관련 property : driver, url db벤더에서 결정
String driver = "oracle.jdbc.driver.OracleDriver";
String url = "jdbc:oracle:thin:@127.0.0.1:1521:XE";
String user = "hr";
String password = "tiger";


## jdbc 프로그래밍 절차 : java.sql.* ##
1.
Class.forName(driver);
throws ClasNotFoundException 처리

2. 
-- jdbc 관련 : throws SQLException 처리
Connection conn = DriverManager.getConnection(url, user, password);

3. 
// 동적 sql 수행 통로 : 실행시에 crud sql 지정
Statement stmt = conn.createStatement();

// 정적 sql 수행 통로 : 통로 개설시에 sql 전용 지정 => 실행시에 값을 설정한 후에 실행 요청
PreparedStatement stmt = conn.prepareStatement("insert int table values(?, ?,?)");
// ? 매핑되도록 값을 설정
	=> setInt(?-index, number-value)
	=> setString(?-index, string-value) : '문자열' sql문자열변환설정
	
	=> 전용통로 장점 : n/w 트래픽감소, sql문자열자동변환, 보안(SQL INJECTION)

4. C, R, U, D
// C U D => 레코드 추가, 변경, 삭제 => 수행결과 적용된 레코드 수 반환
int rows = stmt.executeUpdate(sql);

// R => 조회 => 결과 여러개(0~n) 반환
ResultSet rs = stmt.executeQuery(sql);

// 기타등등 : ddl ==> 직접 어플리케이션에서 ddl 목적으로 사용하지는 않음(보안문제)
boolean result = stmt.execute(sql);
 
5. select 결과처리 : ResultSet
-- next():boolean => 다음 cursor 이동 => 레코드 결과존재 유무 및 커서이동
-- 현재 커서(레코드)의 컬럼단위로 데이터 추출 : getXxx(조회컬럼인덱스번호), getXxx("컬럼명")
-- 자바는 인덱스 시작이 0번부터 이지만, db는 인덱스가 1번부터 시작
-- db 숫자 => getInt(String):int, getInt(int):int
-- db 문자 => getString()
-- db date => getString() / getDate()
-- String => char ===> charAt(index번호) : char

6. 
rs.close();
stmt.close();
conn.close();

## JDBC 관련 클래스 의존관계
1. Test 
	=> MemberService#login(아이디, 비밀번호) : 등급	
	=> MemberDao#login(아이디, 비밀번호):등급
	
	
## 사용자 데이터 입력 
아이디 : user01
비밀번호 : password01

=> SQL 문자열 : "'" + user01  + "'	"

=> 문자열 => sql문자열 변환메서드
	public String convertSqlString(String data) {
		return "'" + data + "'";
	}
	
## 로그인 
=> MemberService#login(아이디,비밀번호):등급
=> MemberDao#login(아이디,비밀번호):등급
	
## 내정보조회/회원상세조회
=> MemberService#getMember(아이디) : 회원
=> MemberDao#selectOne(아이디): 회원
	
	
## 전체회원조회
=> MemberService#getMemberList() : ArrayList<회원>
=> MemberDao#selectList(): ArrayList<회원>
	

## 회원등급별 전체조회 	
=> MemberService#getMemberList(등급) : ArrayList<회원>
=> MemberDao#selectList(등급): ArrayList<회원>
	


## 회원관리 소스코드 참고
-- MemberDao.java
package com.work.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

/** 
 	## DAO Pattern
 	-- C
 	-- R
 	-- U
 	-- D

	## JDBC 프로그래밍 기본절차(순서)
	1. jdbc driver 로딩 : 생성자 수행
	
	2. db 서버연결 : url, user, password  => Connection
	
	3. 연결된 서버와 통로 개설 => Statement, PreparedStatement, CallableStatement
	4. 통로이용 sql 실행 요청
	
	5. 실행결과 처리
	6. 자원해제
 *
 */
public class MemberDao {
	// jdbc resource property
	private String driver = "oracle.jdbc.driver.OracleDriver";
	private String url = "jdbc:oracle:thin:@localhost:1521:XE";
	private String user = "scott";
	private String password = "tiger";

	
	/**
	 * 1. jdbc driver 로딩
	 */
	public MemberDao() {
		try {
			Class.forName(driver);
			System.out.println("[성공] 드라이버 로딩");
		} catch (ClassNotFoundException e) {
			System.out.println("[오류] 드라이버 로딩 오류");
			e.printStackTrace();
		}
	}
	
	/**
	 * 로그인
	 * 	1. driver 로딩 : 생성자에서 선해처리함
	 	2. db 서버연결 : url, user, password  => Connection
		3. 연결된 서버와 통로 개설 => Statement, PreparedStatement, CallableStatement
		4. 통로이용 sql 실행 요청
			// C U D => 레코드 추가, 변경, 삭제 => 수행결과 적용된 레코드 수 반환
			int rows = stmt.executeUpdate(sql);

			// R => 조회 => 결과 여러개(0~n) 반환
			ResultSet rs = stmt.executeQuery(sql);
		5. 실행결과 처리
		6. 자원해제
	 * @param memberId 아이디
	 * @param memberPw 비밀번호
	 * @return 회원 등급, 미존재시 null
	 */
	public String login2(String memberId, String memberPw) {
		try {
			// 2.
			Connection conn = DriverManager.getConnection(url, user, password);
			// 3.
			Statement stmt = conn.createStatement();
			
			// 4. 로그인을 위한 SQL 구문
			//String sql = "select Grade from member where member_ID ='user01' and member_pw = 'password01'";
			String sql = "select Grade from member where member_ID ='" + memberId + "' and member_pw = '" + memberPw + "'";
			// 4.
			ResultSet rs = stmt.executeQuery(sql);
			// 5.
			if(rs.next()) {
				String grade = rs.getString("grade");
				return grade;
			}
			// 6.
			rs.close();
			stmt.close();
			conn.close();
			
		} catch (SQLException e) {
			System.out.println("[오류] 로그인");
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * ## PreparedStatement 를 이용한 로그인 처리
	 * 
	 * @param memberId
	 * @param memberPw
	 * @return
	 */
	public String login(String memberId, String memberPw) {
		try {
			// 2.
			Connection conn = DriverManager.getConnection(url, user, password);
			
			// 3. 주의사항 : SQL 구문뒤에 ;(세미콜론)이 와서는 안됨
			String sql = "select Grade from member where member_ID =? and member_pw = ?"; // 로그인
			PreparedStatement stmt = conn.prepareStatement(sql);
			
			// 3. 주의사항 : ?에 매핑되는 값을 설정
			stmt.setString(1, memberId);
			stmt.setString(2, memberPw);
			
			// 4. 실행시에 이미 전용통로로 개설되었으므로 sql 구문을 지정해서는 안됨
			ResultSet rs = stmt.executeQuery();
			
			// 5.
			if(rs.next()) {
				String grade = rs.getString("grade");
				return grade;
			}
			// 6.
			rs.close();
			stmt.close();
			conn.close();
			
		} catch (SQLException e) {
			System.out.println("[오류] 로그인");
			e.printStackTrace();
		}
		
		return null;
	}

	//	## 내정보조회/회원상세조회
	//	=> MemberService#getMember(아이디) : 회원
	//	=> MemberDao#selectOne(아이디): 회원
	public Member selectOne(String memberId) {
		try {
			// 2.
			Connection conn = DriverManager.getConnection(url, user, password);
			
			String sql = "select * from member where member_ID = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
			
			// 3. 주의사항 : ?에 매핑되는 값을 설정
			stmt.setString(1, memberId);
			
			// 4. 실행시에 이미 전용통로로 개설되었으므로 sql 구문을 지정해서는 안됨
			ResultSet rs = stmt.executeQuery();
			
			// 5.
			if(rs.next()) {
				// String memberId = rs.getString("member_Id"); // 아규먼트로 아이디를 전달받았으니 다시 가지고올필요없죠
				// 나머지 구현 비밀번호, 이름, 휴대폰, 이메일, 가입일, 등급, 마일리지, 담당자 : 데이터가져오기
				String memberPw = rs.getString("member_pw");
				String name = rs.getString("name");
				String mobile = rs.getString("mobile");
				String email = rs.getString("email");
				String entryDate = rs.getString("entry_date");
				String grade = rs.getString("grade");
				int mileage = rs.getInt("mileage");
				String manager = rs.getString("manager");
				
				// select 결과로 가져온 회원의 정보로 Member 객체 생성자 이용해서 Member 객체 생성
				Member dto = new Member(memberId, memberPw, name, mobile, email, entryDate, grade, mileage, manager);
				return dto;  // 생성한 Member객체 반환
			}
			// 6.
			rs.close();
			stmt.close();
			conn.close();
			
		} catch (SQLException e) {
			System.out.println("[오류] 회원상세조회");
			e.printStackTrace();
		}
		
		return null;
	}

//	## 전체회원조회
//	=> MemberService#getMemberList() : ArrayList<회원>
//	=> MemberDao#selectList(): ArrayList<회원>
	public ArrayList<Member> selectList() {
		ArrayList<Member> list = new ArrayList<Member>();
		
		try {
			Connection conn = DriverManager.getConnection(url, user, password);
			
			String sql = "select * from member";
			PreparedStatement stmt = conn.prepareStatement(sql);
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				String memberId = rs.getString("member_Id"); 
				String memberPw = rs.getString("member_pw");
				String name = rs.getString("name");
				String mobile = rs.getString("mobile");
				String email = rs.getString("email");
				String entryDate = rs.getString("entry_date");
				String grade = rs.getString("grade");
				int mileage = rs.getInt("mileage");
				String manager = rs.getString("manager");
				
				Member dto = new Member(memberId, memberPw, name, mobile, email, entryDate, grade, mileage, manager);
				list.add(dto);
			}
			
			rs.close();
			stmt.close();
			conn.close();
			
		} catch (SQLException e) {
			System.out.println("[오류] 회원전체조회");
			e.printStackTrace();
		}
		return list;
	}

//	## 회원등급별 전체조회 	
//	=> MemberService#getMemberListByGrade(등급) : ArrayList<회원>
//	=> MemberDao#selectListByGrade(등급): ArrayList<회원>
		
	public ArrayList<Member> selectListByGrade(String grade) {
		ArrayList<Member> list = new ArrayList<Member>();
		
		try {
			Connection conn = DriverManager.getConnection(url, user, password);
			
			String sql = "select * from member where grade=?";
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setString(1, grade);
			
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				String memberId = rs.getString("member_Id"); 
				String memberPw = rs.getString("member_pw");
				String name = rs.getString("name");
				String mobile = rs.getString("mobile");
				String email = rs.getString("email");
				String entryDate = rs.getString("entry_date");
//				String grade = rs.getString("grade");  // 아규먼트로 회원의 조회할 등급받았으므로 가져올필요없음
				int mileage = rs.getInt("mileage");
				String manager = rs.getString("manager");
				
				Member dto = new Member(memberId, memberPw, name, mobile, email, entryDate, grade, mileage, manager);
				list.add(dto);
			}
			
			rs.close();
			stmt.close();
			conn.close();

			//return list;
			
		} catch (SQLException e) {
			System.out.println("[오류] 등급별 회원전체조회");
			e.printStackTrace();
		}
		
		return list;
	}
	
}

-- MemberService.java
package com.work.model;

import java.util.ArrayList;

/*## JDBC 관련 클래스 의존관계
	1. Test 
	=> MemberService#login(아이디, 비밀번호) : 등급	
	=> MemberDao#login(아이디, 비밀번호):등급
*/
public class MemberService {
	/** MemberDao 객체 */
	private MemberDao dao = new MemberDao();

	/**
	 * 로그인
	 * @param memberId 아이디
	 * @param memberPw 비밀번호
	 * @return 회원 등급, 미존재시 null
	 */
	public String login(String memberId, String memberPw) {
		String grade = dao.login(memberId, memberPw);
		if (grade != null) {
			return grade;
		}
		
		return null;
	}
	
	//	## 내정보조회/회원상세조회
	//	=> MemberService#getMember(아이디) : 회원
	//	=> MemberDao#selectOne(아이디): 회원
	public Member getMember(String memberId) {
//		Member dto = dao.selectOne(memberId);
//		return dto;
		
		return dao.selectOne(memberId);
	}
		
//	## 전체회원조회
//	=> MemberService#getMemberList() : ArrayList<회원>
//	=> MemberDao#selectList(): ArrayList<회원>
	public ArrayList<Member> getMemberList() {
		return dao.selectList();
	}

//	## 회원등급별 전체조회 	
//	=> MemberService#getMemberListByGrade(등급) : ArrayList<회원>
//	=> MemberDao#selectListByGrade(등급): ArrayList<회원>
	public ArrayList<Member> getMemberListByGrade(String grade) {
		return dao.selectListByGrade(grade);
	}

}


-- Test.java
package com.work.view;

import java.util.ArrayList;

import com.work.model.Member;
import com.work.model.MemberService;

public class Test {

	/*## JDBC 관련 클래스 의존관계
		1. Test 
		=> MemberService#login(아이디, 비밀번호) : 등급	
		=> MemberDao#login(아이디, 비밀번호):등급
	*/
	public static void main(String[] args) {
		// MemberService 객체 생성
		MemberService service = new MemberService();

		print("로그인");
		String grade = service.login("user01", "password01");
		if (grade != null) {
			System.out.println("로그인성공 등급 : " + grade);
		} else {
			System.out.println("로그인 실패 : 회원정보를 확인하시기 바랍니다.");
		}
		
		print("로그인");
		grade = service.login("user05", "password05");
		if (grade != null) {
			System.out.println("로그인성공 등급 : " + grade);
		} else {
			System.out.println("로그인 실패 : 회원정보를 확인하시기 바랍니다.");
		}
		
		print("회원상세조회 : user01");
		Member dto = service.getMember("user01");
		if (dto != null) {
			System.out.println(dto);
		} else {
			System.out.println("조회 실패 : 회원정보가 존재하지 않습니다.");
		}
		
		print("전체회원조회");
		ArrayList<Member> list = service.getMemberList();
		for (Member member : list) {
			System.out.println(member);
		}

		print("등급별 전체회원조회 : 일반회원");
		list = service.getMemberListByGrade("G");
		for (Member member : list) {
			System.out.println(member);
		}
		
		print("등급별 전체회원조회 : 우수회원");
		list = service.getMemberListByGrade("S");
		for (Member member : list) {
			System.out.println(member);
		}

		print("등급별 전체회원조회 : 일반회원");
		list = service.getMemberListByGrade("A");
		for (Member member : list) {
			System.out.println(member);
		}
		
	}

	public static void print(String message) {
		System.out.println("\n### " + message);
	}
}


## 미션 :	
## select 로 할수있는 회원관리 서비스????
-- 김혜진 : 
아이디찾기()
비밀번호찾기()

-- 문수인 :
아이디중복체크()

-- 김기영
=> 관리자: 우수회원 자동등업대상자 전체조회

-- 김주리
=> 이메일중복체크

-- 한다예
=> 일정기간(1년이상)된 회원의 목록조회

-- 김대현
=> 담당자가 담당하는 회원의 아이디, 이름 목록조회































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	